{"version":3,"sources":["logo.svg","components/header.js","components/body.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Head","className","Navbar","collapseOnSelect","expand","bg","variant","sticky","Toggle","aria-controls","Collapse","id","Nav","Link","href","Form","inline","FormControl","type","placeholder","Button","Body","useState","products","setProducts","useEffect","axios","get","then","response","data","console","log","catch","error","Image","src","fluid","Container","map","product","key","imgthumb","rounded","Footer","fixed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,6MC+B5BC,MAxBf,WAEC,OACQ,4BAAQC,UAAU,aAClB,wBAAIA,UAAU,WAAd,aAAkC,wCAClC,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAMC,GAAG,OAAOC,QAAQ,OAAOL,UAAU,eAAeM,OAAO,OAC7F,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,0BAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,yBACpB,kBAACC,EAAA,EAAD,CAAKX,UAAU,WACf,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,UAAU,iBAAiBa,KAAK,SAAQ,uBAAGb,UAAU,gCAAb,QAAlD,QACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,UAAU,iBAAiBa,KAAK,SAAQ,uBAAGb,UAAU,4BAAb,qBAAlD,QACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,UAAU,iBAAiBa,KAAK,UAAS,uBAAGb,UAAU,4BAAb,SAAnD,SACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,UAAU,iBAAiBa,KAAK,WAAU,uBAAGb,UAAU,4BAAb,OAApD,mBAEC,kBAACc,EAAA,EAAD,CAAMC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASlB,UAAU,YACxD,kBAACmB,EAAA,EAAD,CAAQd,QAAQ,gBAAhB,e,+CCiBGe,MAjCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACPC,EADO,KACEC,EADF,KAad,OAVAC,qBAAU,WACHC,IAAMC,IAAI,iBACTC,MAAK,SAACC,GACNL,EAAYK,EAASC,MACrBC,QAAQC,IAAIH,MAEZI,OAAM,SAACC,GACPH,QAAQC,IAAIE,QAElB,IAEQ,yBAAKjC,UAAU,uBACf,yBAAKA,UAAU,cACV,kBAACkC,EAAA,EAAD,CAAOC,IAAI,WAAYC,OAAK,KAEjC,yBAAKpC,UAAU,oBACf,kBAACqC,EAAA,EAAD,CAAWD,OAAK,GAChB,0BAAMpC,UAAU,+BAAhB,YAECsB,EAASgB,KAAI,SAACC,GAAD,OAEL,uBAAG1B,KAAK,IAAI2B,IAAKD,EAAQ7B,IAAK,kBAACwB,EAAA,EAAD,CAAOC,IAAKI,EAAQE,SAAUzC,UAAU,YAAY0C,SAAO,EAACN,OAAK,YCrBpGO,MARf,WAEC,OACQ,yBAAKC,MAAM,UAAX,WCWMC,MAVf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM4B,c","file":"static/js/main.04446406.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport FormControl from 'react-bootstrap/FormControl'\nimport \"./header.css\"\nfunction Head(){\n\n\treturn(\n         <header className=\"fixed-top\">\n         <h2 className=\"heading\">Shopper's <small>Shop</small></h2>\n         <Navbar collapseOnSelect expand=\"lg\"  bg=\"dark\" variant=\"dark\" className=\"position-top\" sticky=\"top\">\n           <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n           <Navbar.Collapse id=\"responsive-navbar-nav\">\n           <Nav className=\"mx-auto\">\n           <Nav.Link className='ml-10 p-0 pl-5' href=\"#home\"><i className=\"material-icons orange600 p-0\">home</i>Home</Nav.Link>\n           <Nav.Link className='ml-10 p-0 pl-5' href=\"#cart\"><i className=\"material-icons orange600\">add_shopping_cart</i>Cart</Nav.Link>\n           <Nav.Link className='ml-10 p-0 pl-5' href=\"#login\"><i className=\"material-icons orange600\">login</i>LogIn</Nav.Link>\n           <Nav.Link className='ml-10 p-0 pl-5' href=\"#create\"><i className=\"material-icons orange600\">add</i>Create Account</Nav.Link>\n           </Nav>\n            <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-info\">Search</Button>\n            </Form>\n            </Navbar.Collapse>\n         </Navbar>\n         </header>\n\t\t)\n}\n\nexport default Head","import React,{useState,useEffect} from \"react\"\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Image from 'react-bootstrap/Image'\nimport axios from \"axios\"\nimport './body.css'\nfunction Body(){\n\tconst [products,setProducts]=useState([])\n\n\tuseEffect(()=>{\n        axios.get(\"products.json\")\n        .then((response)=>{\n        \tsetProducts(response.data)\n        \tconsole.log(response)\n        })\n        .catch((error)=>{\n        \tconsole.log(error)\n        })\n\t},[])\n\treturn(\n           <div className=\"ml-0 pl-0 mr-0 pr-0\">\n           <div className=\"logo mt-0 \">\n                <Image src=\"logo.png\"  fluid/> \n           </div>\n           <div className=\"margin-container\">\n           <Container fluid>\n           <span className=\"mt-0 ml-5 title text-center\">Products</span>\n           {\n           \tproducts.map((product)=>(\n           \t\t      \n           \t\t       <a href=\"#\" key={product.id} ><Image src={product.imgthumb} className=\"mb-5 ml-5\" rounded fluid /></a>\n           \t\t       \n           \t\t))\n           }\n           </Container>\n           </div>\n           </div>\n\t\t) \n}\nexport default Body","import React from 'react'\n\nfunction Footer() {\n\t// body...\n\treturn(\n         <div fixed=\"bottom\">\n         Footer\n         </div>\n\t\t)\n}\nexport default Footer","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Head from './components/header'\nimport Body from './components/body'\nimport Footer from './components/footer'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Head/>\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}